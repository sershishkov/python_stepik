######################################################

# rows, cols = 3, 4           # rows - количество строк, cols - количество столбцов

# matrix = [[2, 3, 1, 0],
#           [9, 4, 6, 8],
#           [4, 7, 2, 7]]

# for r in range(rows):
#     for c in range(cols):
#         print(matrix[r][c], end=' ')
#     print()
######################################################
######################################################

# rows, cols = 3, 4           # rows - количество строк, cols - количество столбцов

# matrix = [[2, 3, 1, 0],
#           [9, 4, 6, 8],
#           [4, 7, 2, 7]]

# for c in range(cols):
#     for r in range(rows):
#         print(matrix[r][c], end=' ')
#     print()
######################################################
######################################################
# print('a'.ljust(3))
# print('ab'.ljust(3))
# print('abc'.ljust(3))
######################################################
######################################################
# print('a'.ljust(5, '*'))
# print('ab'.ljust(5, '$'))
# print('abc'.ljust(5, '#'))
######################################################
######################################################
# print('a'.rjust(3))
# print('ab'.rjust(3))
# print('abc'.rjust(3))
######################################################
######################################################
# print('a'.rjust(5, '*'))
# print('ab'.rjust(5, '$'))
# print('abc'.rjust(5, '#'))
######################################################
######################################################
# rows, cols = 3, 4                # rows - количество строк, cols - количество столбцов

# matrix = [[277, -930, 11, 0],
#           [9, 43, 6, 87],
#           [4456, 8, 290, 7]]

# for r in range(rows):
#     for c in range(cols):
#         print(str(matrix[r][c]).ljust(6), end='')
#     print()
######################################################
######################################################
# n = 8
# matrix = [[0]*n for _ in range(n)]    # создаем квадратную матрицу размером 8×8

# for i in range(n):                     # заполняем главную диагональ единицами, а побочную двойками
#     matrix[i][i] = 1
#     matrix[i][n-i-1] = 2

# for r in range(n):                     # выводим матрицу
#     for c in range(n):
#         print(matrix[r][c], end=' ')
#     print()

######################################################
######################################################

# Индексыi и jэлементов на главной диагонали связаны соотношением i = j. Индексы i и jэлементов на побочной диагонали связанны соотношением i + j + 1 = n(или  j=n - i - 1), где n — размерность матрицы
# если элемент находится выше главной диагонали, то i < j, если ниже, i > j.
# если элемент находится выше побочной диагонали, то i + j + 1 < n, если ниже, i + j + 1 > n.

# Примечание 1. Чтобы понять, в какой области лежит элемент можно воспользоваться следующей картинкой.
# верх i<j and i< n-1-j
# право i<j and i> n-1-j
# низ i>j and i>n-1-j
# лево i>j and i<n-1-j

######################################################
######################################################
# Примечание 2. Используйте функцию print_matrix() для вывода квадратной матрицы размерности n:
# def print_matrix(matrix, n, width=1):
#     for r in range(n):
#         for c in range(n):
#             print(str(matrix[r][c]).ljust(width), end=' ')
#         print()


# Примечание 3. Для считывания матрицы из n строк, заполненной числами, удобно использовать следующий код:
# n = int(input())
# matrix = []
# for i in range(n):
#     temp = [int(num) for num in input().split()]
#     matrix.append(temp)

# print_matrix(matrix, n, 2)
######################################################
######################################################
# n = 3
# a = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9]]

# for i in range(n):
#     for j in range(n):
#         print(a[n - i - 1][n - j - 1], end=' ')
#     print()
######################################################
######################################################
# n = 5
# a = [[19, 21, 33, 78, 99],
#      [41, 53, 66, 98, 76],
#      [79, 80, 90, 60, 20],
#      [33, 11, 45, 67, 90],
#      [45, 67, 12, 98, 23]]

# maximum = -1
# minimum = 100

# for i in range(n):
#     if a[i][i] > maximum:
#         maximum = a[i][i]
#     if a[i][n - i - 1] < minimum:
#         minimum = a[i][n - i - 1]
# print(minimum + maximum)
######################################################
######################################################

# 8 #########################
# На вход программе подаются два натуральных числа nn и mm, каждое на отдельной строке — количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке; подряд идут элементы сначала первой строки, затем второй, и т.д.
# Напишите программу, которая сначала считывает элементы матрицы один за другим, затем выводит их в виде матрицы.
# rows, cols = int(input()), int(input())
# my_list = [[""] * cols for _ in range(rows)]
# for i in range(rows):
#     for j in range(cols):
#         my_list[i][j] = input()

# for i in range(rows):
#     for j in range(cols):
#         print(my_list[i][j], end=' ')
#     print()

######################################################

# 9 #########################
# На вход программе подаются два натуральных числа nn и mm, каждое на отдельной строке — количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждое на отдельной строке; подряд идут элементы сначала первой строки, затем второй, и т.д.
# Напишите программу, которая считывает элементы матрицы один за другим, выводит их в виде матрицы, выводит пустую строку, и снова ту же матрицу, но уже поменяв местами строки со столбцами: первая строка выводится как первый столбец, и так далее.
# rows, cols = int(input()), int(input())
# my_list = [[""] * cols for _ in range(rows)]
# for i in range(rows):
#     for j in range(cols):
#         my_list[i][j] = input()

# for i in range(rows):
#     for j in range(cols):
#         print(my_list[i][j], end=' ')
#     print()

# print()

# for i in range(cols):
#     for j in range(rows):
#         print(my_list[j][i], end=' ')
#     print()

######################################################

# 10 #########################
# След матрицы
# Следом квадратной матрицы называется сумма элементов главной диагонали. Напишите программу, которая выводит след заданной квадратной матрицы.
# На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы (целые числа) построчно через пробел.
n = int(input())
my_list = []
sum = 0
for i in range(n):
    row = [int(item) for item in input().split()]
    my_list.append(row)

for i in range(n):
    sum += my_list[i][i]

print(sum)
######################################################

# 11 #########################
#
#


######################################################

# 12 #########################
#
#


######################################################

# 13 #########################
#
#


######################################################

# 14 #########################
#
#


######################################################
